#proj_dir <- "/mnt/hd2/Dropbox (Partners HealthCare)/projects/2017_10_histone_code/RMEJ_analysis"
root_dir <- "/mnt/hd2/projects/histone_code/histone_code"
proj_dir <- file.path(root_dir, "/prepocessing")
sample_names_dir <-  file.path(proj_dir,  "sample_names")
#dir.create(sample_names_dir)
output_dir <- file.path(proj_dir,"files_source_urls")
data_dir <- "/data/molpath/common_data/roadmap"
bigwig_dir <- file.path(data_dir, "bigwig_pvalue")
rpkm_output_dir <- file.path(data_dir, "gene_expression" ,"rpkm")
#dir.create(rpkm_output_dir)
root_dir <- "/mnt/hd2/projects/histone_code/histone_code"
proj_dir <- file.path(root_dir, "/prepocessing")
setwd(proj_dir)
root_dir <- "/mnt/hd2/projects/histone_code/histone_code"
proj_dir <- file.path(root_dir, "prepocessing")
setwd(proj_dir)
#proj_dir <- "/mnt/hd2/Dropbox (Partners HealthCare)/projects/2017_10_histone_code/RMEJ_analysis"
root_dir <- "/mnt/hd2/projects/histone_code/histone_code"
proj_dir <- file.path(root_dir, "preprocessing")
setwd(proj_dir)
sample_names_dir <-  file.path(proj_dir,  "sample_names")
#dir.create(sample_names_dir)
output_dir <- file.path(proj_dir,"files_source_urls")
data_dir <- "/data/molpath/common_data/roadmap"
bigwig_dir <- file.path(data_dir, "bigwig_pvalue")
rpkm_output_dir <- file.path(data_dir, "gene_expression" ,"rpkm")
#dir.create(rpkm_output_dir)
download.file("http://egg2.wustl.edu/roadmap/data/byDataType/rna/expression/EG.name.txt",
"EG.name.txt")
eg_names <- fread(input = "EG.name.txt",
header = FALSE,
col.names = c("epigenome",
"celltypes")) %>%
filter(epigenome != "E000" )
library(dplyr)
library(tibble)
library(tidyr)
library(readr) # ggplot2, dplyr, tidyr, readr, purrr, tibble
library(stringr) # string manipulation
library(data.table)
eg_names <- fread(input = "EG.name.txt",
header = FALSE,
col.names = c("epigenome",
"celltypes")) %>%
filter(epigenome != "E000" )
eg_names
ah <- AnnotationHub()
library(AnnotationHub)
library(biomaRt)
ah <- AnnotationHub()
# Searching for  epigenomes in the roadmap database
epiFiles <- query(ah, c("EpigenomeRoadMap", "^E"))
epiFiles <- query(epiFiles , c( "H3K27ac.pval.signal.bigwig",
"H3K27me3.pval.signal.bigwig",
"H3K4me3.pval.signal.bigwig",
"H3K36me3.pval.signal.bigwig",
"H3K9me3.pval.signal.bigwig",
"H3K4me1.pval.signal.bigwig"),
pattern.op = `|`)
epiFiles
RMEP_dt <- data.table(title = epiFiles$title,
sourceurl = epiFiles$sourceurl) %>%
bind_cols(do(., data.frame(
str_split(.$title,
"-|.pval",
simplify = TRUE)[,1:2],
stringsAsFactors = FALSE)))  %>%
select(-title) %>%
rename( epigenome= "X1",
mark= "X2")
library(dplyr)
library(tibble)
library(tidyr)
library(readr) # ggplot2, dplyr, tidyr, readr, purrr, tibble
library(stringr) # string manipulation
library(data.table)
RMEP_dt <- data.table(title = epiFiles$title,
sourceurl = epiFiles$sourceurl) %>%
bind_cols(do(., data.frame(
str_split(.$title,
"-|.pval",
simplify = TRUE)[,1:2],
stringsAsFactors = FALSE)))  %>%
select(-title) %>%
rename( epigenome= "X1",
mark= "X2")
library(AnnotationHub)
library(biomaRt)
library(dplyr)
library(tibble)
library(tidyr)
library(readr) # ggplot2, dplyr, tidyr, readr, purrr, tibble
library(stringr) # string manipulation
#library(data.table)
#proj_dir <- "/mnt/hd2/Dropbox (Partners HealthCare)/projects/2017_10_histone_code/RMEJ_analysis"
root_dir <- "/mnt/hd2/projects/histone_code/histone_code"
proj_dir <- file.path(root_dir, "preprocessing")
setwd(proj_dir)
sample_names_dir <-  file.path(proj_dir,  "sample_names")
#dir.create(sample_names_dir)
output_dir <- file.path(proj_dir,"files_source_urls")
data_dir <- "/data/molpath/common_data/roadmap"
bigwig_dir <- file.path(data_dir, "bigwig_pvalue")
rpkm_output_dir <- file.path(data_dir, "gene_expression" ,"rpkm")
#dir.create(rpkm_output_dir)
eg_names <- fread(input = "EG.name.txt",
header = FALSE,
col.names = c("epigenome",
"celltypes")) %>%
filter(epigenome != "E000" )
eg_names <- read_tsv(input = "EG.name.txt",
header = FALSE,
col.names = c("epigenome",
"celltypes")) %>%
filter(epigenome != "E000" )
?read_tsv
eg_names <- data.table::fread(input = "EG.name.txt",
header = FALSE,
col.names = c("epigenome",
"celltypes")) %>%
filter(epigenome != "E000" )
eg_names
ah <- AnnotationHub()
# Searching for  epigenomes in the roadmap database
epiFiles <- query(ah, c("EpigenomeRoadMap", "^E"))
epiFiles <- query(epiFiles , c( "H3K27ac.pval.signal.bigwig",
"H3K27me3.pval.signal.bigwig",
"H3K4me3.pval.signal.bigwig",
"H3K36me3.pval.signal.bigwig",
"H3K9me3.pval.signal.bigwig",
"H3K4me1.pval.signal.bigwig"),
pattern.op = `|`)
epiFiles
RMEP_dt <- data.table(title = epiFiles$title,
sourceurl = epiFiles$sourceurl) %>%
bind_cols(do(., data.frame(
str_split(.$title,
"-|.pval",
simplify = TRUE)[,1:2],
stringsAsFactors = FALSE)))  %>%
select(-title) %>%
rename( epigenome= "X1",
mark= "X2")
RMEP_dt <- data.frame(title = epiFiles$title,
sourceurl = epiFiles$sourceurl) %>%
bind_cols(do(., data.frame(
str_split(.$title,
"-|.pval",
simplify = TRUE)[,1:2],
stringsAsFactors = FALSE)))  %>%
select(-title) %>%
rename( epigenome= "X1",
mark= "X2")
marks <- RMEP_dt %>%
select(mark) %>%
unique  %>%
unlist
RMEP_dt
epifiles_dt <- RMEP_dt %>%
data.table::dcast( epigenome ~ mark )
epifiles_dt
epifiles_dt  <- left_join(eg_names,
epifiles_dt,
by ='epigenome')
epifiles_dt
epifiles_dt$marks_num <- epifiles_dt %>%
select(-epigenome, -celltypes)  %>%
is.na %>%
`!` %>%
rowSums
epifiles_dt
epifiles_dt %>%
select(marks_num) %>%
table
selected_epigenomes <- epifiles_dt %>%
filter(marks_num == 6) %>%
filter(!(epigenome %in% c("E056", "E059"))) %>%
arrange(marks_num)
selected_epigenomes$epigenome_name <- lapply(
str_split(
selected_epigenomes$celltypes,
"_Derived|_Cultured_Cells|_Cell_Line|_Primary_Cells|_Foreskin|_Naive_Primary_Cells|_skin02|_skin03|_skin01|_Foreskin|_Cells|_Female|_Mononuclear|_Middle",
n = 4),
str_c,
collapse = "") %>%
unlist %>%
str_c(selected_epigenomes$epigenome,
.,
sep = "_")
selected_epigenomes
sample_names_dt <- list()
for (mark_target in marks) {
sample_names_dt[[mark_target]] <- selected_epigenomes  %>%
select(epigenome_name,
mark_target,
epigenome)  %>%
rowwise() %>%
mutate(
mark = mark_target,
epigenome_mark = str_c(epigenome, "_", mark_target),
filepath =  file.path(
bigwig_dir,
paste0(epigenome, "-", mark_target, ".pval.signal.bigwig")
),
rpkm_filepath = file.path(rpkm_output_dir,
paste0(epigenome,
"_avg_rpkm.txt"))
) %>%
select(epigenome_mark,
epigenome_name,
epigenome,
mark,
filepath,
rpkm_filepath)
}
metadata_dt <- do.call(rbind, sample_names_dt)
metadata_dt
fwrite(
metadata_dt,
file.path(proj_dir,"rmep_metadata_46epigenomes_6histones.txt"),
col.names = FALSE,
sep = "\t")
data.table::fwrite(
metadata_dt,
file.path(proj_dir,"rmep_metadata_46epigenomes_6histones.txt"),
col.names = FALSE,
sep = "\t")
library(ChIPQC)
data(blacklist_hg19)
blacklist.hg19 <- dropSeqlevels(blacklist.hg19,
paste0("chr", c("X", "Y")),
pruning.mode = "tidy")
chrom_keep <- seqlengths(BSgenome.Hsapiens.UCSC.hg19)[seqlevels(blacklist.hg19)]
library(BSgenome.Hsapiens.UCSC.hg19)
library(ChIPQC)
library(GenomicFiles)
data(blacklist_hg19)
blacklist.hg19 <- dropSeqlevels(blacklist.hg19,
paste0("chr", c("X", "Y")),
pruning.mode = "tidy")
chrom_keep <- seqlengths(BSgenome.Hsapiens.UCSC.hg19)[seqlevels(blacklist.hg19)]
rng <- tileGenome(chrom_keep,
tilewidth = 500,
cut.last.tile.in.chrom = TRUE)
rng <- subsetByOverlaps(rng,
blacklist.hg19,
invert = TRUE)
data(blacklist_hg19)
blacklist.hg19 <- dropSeqlevels(blacklist.hg19,
paste0("chr", c("X", "Y","M")),
pruning.mode = "tidy")
chrom_keep <- seqlengths(BSgenome.Hsapiens.UCSC.hg19)[seqlevels(blacklist.hg19)]
rng <- tileGenome(chrom_keep,
tilewidth = 500,
cut.last.tile.in.chrom = TRUE)
rng <- subsetByOverlaps(rng,
blacklist.hg19,
invert = TRUE)
rng
annotations_dir <- file.path(root_dir, "data/annotations")
dt_ann <- fread(file.path(annotations_dir,"hg19.500bp.bins.sorted.filtered.bed"))
dt_ann <- data.table::fread(file.path(annotations_dir,"hg19.500bp.bins.sorted.filtered.bed"))
chrom_keep
root_dir <- "/mnt/hd2/projects/histone_code/histone_code"
annotations_dir <- file.path(root_dir, "data/annotations")
library(BSgenome.Hsapiens.UCSC.hg19)
library(ChIPQC)
library(GenomicRanges)
library(GenomicFiles)
library(data.table)
root_dir <- "/mnt/hd2/projects/histone_code/histone_code"
annotations_dir <- file.path(root_dir, "data/annotations")
dac_filepath <- file.path(annotations_dir,"consensusBlacklist.bed.gz")
duke_filepath <- file.path(annotations_dir,"dukeExcludeRegions.bed.gz")
gaps_filepath <- file.path(annotations_dir, "gap.txt.gz")
download.file("http://hgdownload.cse.ucsc.edu/goldenPath/hg19/database/gap.txt.gz",
gaps_filepath)
download.file("http://hgdownload.cse.ucsc.edu/goldenPath/hg19/encodeDCC/wgEncodeMapability/wgEncodeDacMapabilityConsensusExcludable.bed.gz",
dac_filepath)
download.file("http://hgdownload.cse.ucsc.edu/goldenPath/hg19/encodeDCC/wgEncodeMapability/wgEncodeDukeMapabilityRegionsExcludable.bed.gz",
duke_filepath)
dac  <- fread(input = sprintf("zcat < %s", dac_filepath), sep = "\t")
duke <- fread(input = sprintf("zcat < %s", duke_filepath), sep = "\t")
gaps <- fread(input = sprintf("zcat < %s", gaps_filepath), sep = "\t")
dac_grange <- GRanges(seqnames = dac$V1,
ranges   = IRanges(start = dac$V2,
end = dac$V3))
duke_grange <- GRanges(seqnames = duke$V1,
ranges   = IRanges(start = duke$V2,
end = duke$V3))
gaps_grange <- GRanges(seqnames = gaps$V2,
ranges   = IRanges(start = gaps$V3,
end = gaps$V4))
chromosomes <- c('chr1','chr2','chr3','chr4','chr5',
'chr6','chr7','chr8','chr9','chr10',
'chr11','chr12','chr13','chr14','chr15',
'chr16','chr17','chr18','chr19',
'chr20','chr21','chr22','chrX')
dac_grange <- keepSeqlevels(dac_grange, chromosomes)
dac_grange
chromosomes <- c('chr1','chr2','chr3','chr4','chr5',
'chr6','chr7','chr8','chr9','chr10',
'chr11','chr12','chr13','chr14','chr15',
'chr16','chr17','chr18','chr19',
'chr20','chr21','chr22')
dac_grange <- keepSeqlevels(dac_grange, chromosomes)
dac_grange <- keepSeqlevels(dac_grange,
chromosomes,
pruning.mode = "coarse")
dac_grange <- keepSeqlevels(dac_grange,
chromosomes,
pruning.mode = "coarse")
duke_grange <- keepSeqlevels(duke_grange,
chromosomes,
pruning.mode = "coarse")
gaps_grange <- keepSeqlevels(gaps_grange,
chromosomes,
pruning.mode = "coarse")
blacklist <-  c(dac_grange, duke_grange, gaps_grange)
blacklist <- reduce(blacklist)
View(blacklist)
?dropSeqlevels
standardChromosomes:
standardChromosomes
standardChromosomes:()
standardChromosomes()
standardChromosomes(dac_grange)
keepStandardChromosomes(dac_grange,
chromosomes,
pruning.mode = "tidy")
keepStandardChromosomes(dac_grange,
pruning.mode = "tidy")
dac_filepath <- file.path(annotations_dir,"consensusBlacklist.bed.gz")
duke_filepath <- file.path(annotations_dir,"dukeExcludeRegions.bed.gz")
gaps_filepath <- file.path(annotations_dir, "gap.txt.gz")
download.file("http://hgdownload.cse.ucsc.edu/goldenPath/hg19/database/gap.txt.gz",
gaps_filepath)
download.file("http://hgdownload.cse.ucsc.edu/goldenPath/hg19/encodeDCC/wgEncodeMapability/wgEncodeDacMapabilityConsensusExcludable.bed.gz",
dac_filepath)
download.file("http://hgdownload.cse.ucsc.edu/goldenPath/hg19/encodeDCC/wgEncodeMapability/wgEncodeDukeMapabilityRegionsExcludable.bed.gz",
duke_filepath)
dac  <- fread(input = sprintf("zcat < %s", dac_filepath), sep = "\t")
duke <- fread(input = sprintf("zcat < %s", duke_filepath), sep = "\t")
gaps <- fread(input = sprintf("zcat < %s", gaps_filepath), sep = "\t")
dac_grange <- GRanges(seqnames = dac$V1,
ranges   = IRanges(start = dac$V2,
end = dac$V3))
duke_grange <- GRanges(seqnames = duke$V1,
ranges   = IRanges(start = duke$V2,
end = duke$V3))
gaps_grange <- GRanges(seqnames = gaps$V2,
ranges   = IRanges(start = gaps$V3,
end = gaps$V4))
dac_grange <- keepStandardChromosomes(dac_grange,
pruning.mode = "tidy")
duke_grange <- keepStandardChromosomes(duke_grange,
pruning.mode = "tidy")
gaps_grange <- keepStandardChromosomes(gaps_grange,
pruning.mode = "tidy")
blacklist <-  c(dac_grange, duke_grange, gaps_grange)
blacklist <- reduce(blacklist)
chrom_keep
chrom_keep <- seqlengths(BSgenome.Hsapiens.UCSC.hg19)[seqlevels(blacklist)]
chrom_keep
seqlevels(blacklist)
dac  <- fread(input = sprintf("zcat < %s", dac_filepath), sep = "\t")
duke <- fread(input = sprintf("zcat < %s", duke_filepath), sep = "\t")
gaps <- fread(input = sprintf("zcat < %s", gaps_filepath), sep = "\t")
dac_grange <- GRanges(seqnames = dac$V1,
ranges   = IRanges(start = dac$V2,
end = dac$V3))
duke_grange <- GRanges(seqnames = duke$V1,
ranges   = IRanges(start = duke$V2,
end = duke$V3))
gaps_grange <- GRanges(seqnames = gaps$V2,
ranges   = IRanges(start = gaps$V3,
end = gaps$V4))
blacklist <-  c(dac_grange, duke_grange, gaps_grange)
blacklist <- reduce(blacklist)
blacklist <- keepStandardChromosomes(blacklist,
pruning.mode = "tidy")
blacklist <- dropSeqlevels(blacklist,
paste0("chr", c("X", "Y","M")),
pruning.mode = "tidy")
dac_filepath <- file.path(annotations_dir,"consensusBlacklist.bed.gz")
duke_filepath <- file.path(annotations_dir,"dukeExcludeRegions.bed.gz")
gaps_filepath <- file.path(annotations_dir, "gap.txt.gz")
download.file("http://hgdownload.cse.ucsc.edu/goldenPath/hg19/database/gap.txt.gz",
gaps_filepath)
download.file("http://hgdownload.cse.ucsc.edu/goldenPath/hg19/encodeDCC/wgEncodeMapability/wgEncodeDacMapabilityConsensusExcludable.bed.gz",
dac_filepath)
download.file("http://hgdownload.cse.ucsc.edu/goldenPath/hg19/encodeDCC/wgEncodeMapability/wgEncodeDukeMapabilityRegionsExcludable.bed.gz",
duke_filepath)
dac  <- fread(input = sprintf("zcat < %s", dac_filepath), sep = "\t")
duke <- fread(input = sprintf("zcat < %s", duke_filepath), sep = "\t")
gaps <- fread(input = sprintf("zcat < %s", gaps_filepath), sep = "\t")
dac_grange <- GRanges(seqnames = dac$V1,
ranges   = IRanges(start = dac$V2,
end = dac$V3))
duke_grange <- GRanges(seqnames = duke$V1,
ranges   = IRanges(start = duke$V2,
end = duke$V3))
gaps_grange <- GRanges(seqnames = gaps$V2,
ranges   = IRanges(start = gaps$V3,
end = gaps$V4))
blacklist <- c(dac_grange, duke_grange, gaps_grange) %>%
reduce() %>%
keepStandardChromosomes(. ,
pruning.mode = "tidy") %>%
dropSeqlevels(.,
paste0("chr", c("X", "Y","M")),
pruning.mode = "tidy")
tiled_genome <- genome_size %>%
tileGenome(.,
tilewidth = 500,
cut.last.tile.in.chrom = TRUE) %>%
subsetByOverlaps(tiled_genome,
blacklist,
invert = TRUE)
genome_size <- seqlengths(BSgenome.Hsapiens.UCSC.hg19)[seqlevels(blacklist.hg19)]
genome_size
tiled_genome <- genome_size %>%
tileGenome(.,
tilewidth = 500,
cut.last.tile.in.chrom = TRUE) %>%
subsetByOverlaps(tiled_genome,
blacklist,
invert = TRUE)
tiled_genome <- genome_size %>%
tileGenome(.,
tilewidth = 500,
cut.last.tile.in.chrom = TRUE) %>%
subsetByOverlaps(.,
blacklist,
invert = TRUE)
tiled_genome <- genome_size %>%
tileGenome(.,
tilewidth = 500,
cut.last.tile.in.chrom = TRUE) %>%
subsetByOverlaps(.,
blacklist,
invert = TRUE)
blacklist %>%
as.data.frame()[ ,1:3] %>%
fwrite(.,
file.path(annotations_dir,
"blacklist.bed"),
col.names = FALSE,
sep = "\t")
blacklist %>%
as.data.frame(.)[ ,1:3] %>%
fwrite(.,
file.path(annotations_dir,
"blacklist.bed"),
col.names = FALSE,
sep = "\t")
as.data.frame(blacklist)[ ,1:3] %>%
fwrite(.,
file.path(annotations_dir,
"blacklist.bed"),
col.names = FALSE,
sep = "\t")
as.data.frame(tiled_genome)[ ,1:3]
as.data.frame(tiled_genome)
as.data.frame(tiled_genome)[ ,1:3] %>%
fwrite(.,
file.path(annotations_dir,
"hg19.500bp.bins.sorted.filtered2.bed"),
col.names = FALSE,
sep = "\t")
